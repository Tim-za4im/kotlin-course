package lesson21.HomeWork21

/*Требуется описать класс, интерфейс или функцию и реализовать предложенную логику в коде.

Создайте функцию toMap<K, V>(keys: List<K>, values: List<V>): Map<K, V>, которая будет создавать карту из списков ключей и значений.
Если ключей или значений больше, то оставшиеся ключи или значения не записываем в словарь.


Напишите функцию getMiddleElement<T>(list: List<T>): T?, которая будет возвращать средний элемент списка, если он существует.


Напишите класс ListHolder, который будет хранить список элементов типа T и иметь метод для добавления и получения всех элементов.

Создайте интерфейс Mapper<T, R>, который будет определять метод для преобразования элементов типа T в элементы типа R.

Создай класс PhrasesToListOfStrings и имплементируй интефрейс Mapper с типами String и List<String>.
 Метод преобразования должен разбивать входящую строку по символу пробела и возвращать список из полученных слов.
Добавь к интерфейсу Mapper ещё один метод, который будет преобразовывать список элементов типа T в список элементов типа R.
 Реализуй этот метод в классе PhrasesToListOfStrings с аналогичной механикой.


Напишите интерфейс Validator<T>, который будет проверять значение типа T на соответствие определенным условиям и
возвращать булево значение (успешная или неуспешная проверка).


Создай класс StringValidator и имплементируй интерфейс Validator с типом String?. Реализуй проверку, что строка не является null,
 не пустая и не состоит из одних пробелов.


Создай класс OddValidator и имплементируй интерфейс Validator типизированный по Int. Реализуй проверку, что число чётное.


Создай класс ListValidator
с дженериком, ограниченным типом Number
имплементируй интерфейс Validator
типизированный по типу List с nullable типом дженерика класса
Реализуй проверку:
что ни один элемент списка не является null
Ни один элемент приведённый к типу Double не равен 0.0
*/