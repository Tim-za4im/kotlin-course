package lesson14

fun main () {

//Дан словарь с именем и временем выполнения каждого автоматизированного теста в секундах. Определите среднее время выполнения теста.

    val midleAveragTime = mapOf(
        "ТестА1" to 40,
        "ТестБ2" to 50, "ТестВ3" to 55
    )
    //for (entry in midleAveragTime.entries)
    val tesTime = midleAveragTime.values.sum()
    val avarage = tesTime.toDouble() / midleAveragTime.size
    println("Cреднее время выполнения теста %.2f".format(avarage))

    //Имеется словарь с метаданными автоматизированных тестов, где ключи — это имена тестовых методов а значения - строка с метаданными.
    // Выведите список всех тестовых методов.

    val taskMap2 = mapOf(
        "Стринг" to "вывщвит",
        " Формат" to "Форматирует значение",
        " getOf" to "Добавляет значение "
    )
    println(taskMap2.keys.joinToString("\n"))

    //В изменяемый словарь с данными о прохождении тестов добавьте новый тест и его результат
    val mutableMapA = mutableMapOf(
        "ТестА1" to 40,
        "ТестБ2" to 50,
        "ТестВ3" to 55
    )
    mutableMapA["ТестГ4"] = 60
    println(mutableMapA)


//Посчитайте количество успешных тестов в словаре с результатами.
    val mutableMapCount = mutableMapOf(
        1 to "True", 2 to "Fail",
        3 to "True", 4 to "True",
        5 to "Fail",
        6 to "True", 7 to "Fail",
        8 to "True",
        9 to "True", 10 to "True"
    )
    println(mutableMapCount.count { it.value == "True" })

    //Удалите из изменяемого словаря с баг-трекингом запись о баге, который был исправлен.
    val mapBug = mutableMapOf(
        "Error1" to "Fix",
        "Error2" to "Unfix",
        "Error3" to "Fix",
        "Error4" to "Unfix"
    )
    mapBug.remove("Error3")
    println(mapBug)

    //Для словаря с результатами тестирования веб-страниц (ключ — URL страницы, значение — статус ответа),
// выведите сообщение о странице и статусе её проверки.


    val mapWebTest = mapOf("www.google.com" to true,
        "www.mail.ru" to true,
        "www.yahoo.com" to false )

mapWebTest.forEach { (url, status) ->
    println(" cтраница $url статус проверки $status")
}

    //Найдите в словаре с названием и временем ответа сервисов только те, время ответа которых превышает заданный порог.

    val mapService = mapOf("МакДак" to  50 ,"KFC" to 45 , "Шаверма " to 30)
    val specifiedThreshold =35
println(mapService.filterValues { it>specifiedThreshold })
println(mapService.filterValues{ it >30 })

//В словаре хранятся результаты тестирования API (ключ — endpoint, значение — статус ответа в строке).
//Для указанного endpoint найдите статус ответа, если endpoint отсутствует, предположите, что он не был протестирован.
    val mapTestApi = mapOf()



}







/*

В словаре хранятся результаты тестирования API (ключ — endpoint, значение — статус ответа в строке).
Для указанного endpoint найдите статус ответа, если endpoint отсутствует, предположите, что он не был протестирован.
Из словаря, содержащего конфигурации тестового окружения (ключ — название параметра конфигурации), получите значение для "browserType". Ответ не может быть null.
Создайте копию неизменяемого словаря с данными о версиях тестируемого ПО, чтобы добавить новую версию.
Используя словарь с настройками тестирования для различных мобильных устройств (ключ — модель устройства),
получите настройки для конкретной модели или верните настройки по умолчанию.
Проверьте, содержит ли словарь с ошибками тестирования (код и описание) определенный код ошибки.
Дан неизменяемый словарь, где ключи — это идентификаторы тестовых сценариев в формате "TestID_Version",
а значения — статусы выполнения этих тестов ("Passed", "Failed", "Skipped").
Отфильтруйте словарь, оставив только те сценарии, идентификаторы которых соответствуют определённой версии тестов.
У вас есть словарь, где ключи — это названия функциональных модулей приложения, а значения — результаты их тестирования.
 Проверьте, есть ли модули с неудачным тестированием.
Добавьте в изменяемый словарь с настройками тестовой среды настройки из другого словаря.
Объедините два неизменяемых словаря с данными о багах.
Очистите изменяемый словарь с временными данными о последнем прогоне автоматизированных тестов.
Исключите из отчета по автоматизированному тестированию те случаи, где тесты были пропущены (имеют статус “skipped”)
Удалите из словаря с конфигурациями тестирования набор устаревших конфигураций.
Создайте отчет о тестировании, преобразовав словарь с результатами тестирования (ключ — идентификатор теста, значение — результат) в список строк формата "Test ID: результат".
Преобразуйте изменяемый словарь с результатами последнего тестирования в неизменяемый для архивации.
Преобразуйте словарь, содержащий ID теста и данные о времени выполнения тестов, заменив идентификаторы тестов на их названия (название можно получить вызвав фейковый метод, например getNameById(id: String))
Для словаря с оценками производительности различных версий приложения увеличьте каждую оценку на 10%, чтобы учесть новые условия тестирования.
Проверьте, пуст ли словарь с ошибками компиляции тестов.
Убедитесь, что словарь с результатами нагрузочного тестирования не пуст.
Проверьте, прошли ли успешно все автоматизированные тесты в словаре с результатами.
Определите, содержит ли словарь с результатами тестирования хотя бы один тест с ошибкой.
Отфильтруйте словарь с результатами тестирования сервисов, оставив только те тесты, которые не прошли успешно и содержат в названии “optional”.


*/






